{"version":3,"file":"static/js/325.970819bd.chunk.js","mappings":"2MA4BA,MAxBA,YAA8B,IAAVA,EAAS,EAATA,MACZC,GAAWC,EAAAA,EAAAA,MAEjB,OAAqB,IAAjBF,EAAMG,QAEN,wBACGH,EAAMI,KAAI,YAA6B,IAA1BC,EAAyB,EAAzBA,GAAIC,EAAqB,EAArBA,eAChB,OACE,SAAC,KAAD,CAAMC,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMR,GAA1C,UACE,uBAAIK,KAGT,WAIL,CAEH,C,4ECED,MAtBA,WACE,OACE,SAAC,KAAD,CACEI,OAAO,MACPC,MAAM,MACNC,MAAM,UACNC,aAAc,CACZC,SAAU,WACVC,IAAK,MACLC,KAAM,MACNC,UAAW,mBAEbC,aAAa,GACbC,SAAS,EACTC,iBAAiB,GACjBC,iBAAiB,GACjBC,SAAS,GACTC,UAAU,4BAGf,C,qICQD,MA5BA,YAAwD,IAAlCC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,gBAClC,GAA0BC,EAAAA,EAAAA,UAASF,EAAaG,IAAI,UAAY,IAAhE,eAAOC,EAAP,KAAcC,EAAd,KAmBA,OACE,kBAAMC,SAdR,SAAsBC,GAGpB,GAFAA,EAAEC,iBAEY,KAAVJ,EAIF,OAHAK,MAAM,uBACNT,EAAaU,OAAO,cACpBT,EAAgBD,GAIlBC,EAAgB,CAAEU,MAAOP,GAC1B,EAGC,WACE,kBAAOQ,KAAK,OAAOR,MAAOA,EAAOS,SAnBrC,YAAmC,IAAXC,EAAU,EAAVA,OACtBT,EAASS,EAAOV,MACjB,KAkBG,mBAAQQ,KAAK,SAAb,SAAsB,aAG3B,E,2BCuBD,MA3CA,WACE,OAAwCG,EAAAA,EAAAA,MAAxC,eAAOf,EAAP,KAAqBC,EAArB,KACA,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOc,EAAP,KAAaC,EAAb,KACA,GAA4Bf,EAAAA,EAAAA,UAAS,QAArC,eAAOgB,EAAP,KAAeC,EAAf,KAyBA,OAvBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,WAAMC,GAAN,gFAChBH,EAAU,WADM,mBAIYI,EAAAA,EAAAA,IAAaD,GAJzB,gBAKS,KADfE,EAJM,EAINA,SACI7C,OACVwC,EAAU,UAEVF,EAAQO,GACRL,EAAU,SATE,gDAYdA,EAAU,YACVM,QAAQC,MAAM,qCAAd,MAbc,yDAAH,sDAiBmB,OAA9B1B,EAAaG,IAAI,UACnBkB,EAAUrB,EAAaG,IAAI,SAE9B,GAAE,CAACH,KAGF,iCACE,SAAC,EAAD,CACEA,aAAcA,EACdC,gBAAiBA,IAGP,YAAXiB,IAAwB,SAACS,EAAA,EAAD,IACb,aAAXT,IAAyB,wBAAI,UAClB,UAAXA,IAAsB,wBAAI,0BACf,SAAXA,IAAqB,SAACU,EAAA,EAAD,CAAUpD,MAAOwC,MAG5C,C","sources":["components/FilmList/FilmList.jsx","components/Loader/Loader.jsx","components/SearchForm/SearchForm.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {  Link, useLocation } from 'react-router-dom';\n\nfunction FilmList({ films }) {\n  const location = useLocation();\n\n  if (films.length !== 0) {\n    return (\n      <ul>\n        {films.map(({ id, original_title }) => {\n          return (\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              <p>{original_title}</p>\n            </Link>\n          );\n        })}\n      </ul>\n    );\n  } else {\n    return;\n  }\n}\n\nFilmList.propTypes = {\n  films: PropTypes.array.isRequired,\n};\n\nexport default FilmList;\n","import { CirclesWithBar } from 'react-loader-spinner';\n\nfunction LoaderSpinner() {\n  return (\n    <CirclesWithBar\n      height=\"100\"\n      width=\"100\"\n      color=\"#4fa94d\"\n      wrapperStyle={{\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%)',\n      }}\n      wrapperClass=\"\"\n      visible={true}\n      outerCircleColor=\"\"\n      innerCircleColor=\"\"\n      barColor=\"\"\n      ariaLabel=\"circles-with-bar-loading\"\n    ></CirclesWithBar>\n  );\n}\n\nexport default LoaderSpinner;\n","import React, { useState } from 'react';\n\nfunction SearchForm({ searchParams, setSearchParams }) {\n  const [value, setValue] = useState(searchParams.get('query') || '');\n\n  function handleChange({ target }) {\n    setValue(target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    if (value === '') {\n      alert('Enter correct query');\n      searchParams.delete('query');\n      setSearchParams(searchParams);\n      return;\n    }\n\n    setSearchParams({ query: value });\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={value} onChange={handleChange} />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n}\n\nexport default SearchForm;\n","import React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport SearchForm from '../../components/SearchForm';\nimport Loader from '../../components/Loader';\nimport FilmList from '../../components/FilmList';\nimport { searchMovies } from '../../utils/fetch';\n\nfunction Movies() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [data, setData] = useState([]);\n  const [status, setStatus] = useState('idle');\n\n  useEffect(() => {\n    const fetchData = async querry => {\n      setStatus('pending');\n\n      try {\n        const { results } = await searchMovies(querry);\n        if (results.length === 0) {\n          setStatus('empty');\n        } else {\n          setData(results);\n          setStatus('done');  \n        }\n      } catch (error) {\n        setStatus('rejected');\n        console.error('Error occurred during API request:', error);\n      }\n    };\n\n    if (searchParams.get('query') !== null) {\n      fetchData(searchParams.get('query'));\n    }\n  }, [searchParams]);\n\n  return (\n    <>\n      <SearchForm\n        searchParams={searchParams}\n        setSearchParams={setSearchParams}\n      />\n\n      {status === 'pending' && <Loader />}\n      {status === 'rejected' && <h2>error</h2>}\n      {status === 'empty' && <h2>¯\\_(ツ)_/¯</h2>}\n      {status === 'done' && <FilmList films={data}></FilmList>}\n    </>\n  );\n}\n\nexport default Movies;\n"],"names":["films","location","useLocation","length","map","id","original_title","to","state","from","height","width","color","wrapperStyle","position","top","left","transform","wrapperClass","visible","outerCircleColor","innerCircleColor","barColor","ariaLabel","searchParams","setSearchParams","useState","get","value","setValue","onSubmit","e","preventDefault","alert","delete","query","type","onChange","target","useSearchParams","data","setData","status","setStatus","useEffect","fetchData","querry","searchMovies","results","console","error","Loader","FilmList"],"sourceRoot":""}